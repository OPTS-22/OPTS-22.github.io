<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用矿渣我家云搭建个人服务器的一些心得（多图预警）</title>
    <url>/2021/03/01/chainedbox/</url>
    <content><![CDATA[<h1 id="1-个人服务器搭建经历"><a href="#1-个人服务器搭建经历" class="headerlink" title="1.个人服务器搭建经历"></a>1.个人服务器搭建经历</h1><p>矿渣论坛有大佬把自己在OMV系统上把自己集成了各项功能的系统做成镜像分享了出来，这样就省去了很多麻烦</p>
<p>在此感谢<strong>乘风</strong>大佬的固件，集成OpenMedia4Vault4+Armbian5.4.2+Entware+风扇调控防掉盘脚本+Web环境+Docker+部署文件服务/系统维护/影音应用</p>
<p><strong>硬件配置：</strong></p>
<p><strong>CPU: RK3328-ARM-Cortex-A53 四核 1.56Hz</strong><br><strong>GPU: ARM Mali-450 二核</strong><br><strong>内存：1G</strong><br><strong>储存:   8G</strong><br><strong>其他：SATA3（USB3.0转接）/千兆网口/USB3.0/USB2.0</strong><br><strong>电源：12V3A</strong></p>
<p>不得不说，配置相比其他矿渣挺低的，但性价比确实不错</p>
<p><img src="https://i.loli.net/2020/10/24/z9CY3Aok2uUpgfw.png" alt="image-20201024181712754"></p>
<a id="more"></a>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>乘风固件</p>
<blockquote>
<p>恩山论坛：<a href="https://www.right.com.cn/forum/thread-976714-1-1.html">https://www.right.com.cn/forum/thread-976714-1-1.html</a></p>
<p>大佬博客：<a href="https://blog.windtech.cf/index.php/archives/5/">https://blog.windtech.cf/index.php/archives/5/</a></p>
</blockquote>
<p>其他固件推荐</p>
<blockquote>
<p><a href="http://av98.byethost10.com/?thread-785.htm&i=1">Joyist：【影音娱乐服务】-硬盘不掉可休眠-灯亮风扇转-可关机-smb高速读写</a></p>
<p><a href="https://www.bilibili.com/video/BV1iU4y1a764?from=search&seid=13633857137885371259">PowerSee：我家云集成固件,类似于乘风固件，部署的应用稍微有点不同+深度美化</a></p>
<p><a href="https://www.right.com.cn/forum/thread-4076037-1-1.html">恩山论坛：我家云OpenWRT软路由集成系统</a></p>
</blockquote>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/719587330c8f6d9d.png"></p>
<p>相关教程</p>
<blockquote>
<p><a href="https://post.smzdm.com/p/az50epz5/">阿文菌：我家云保姆教程：完美OMV固件推荐+硬改不掉盘实操 超值低功耗NAS 家庭服务器 下载机</a></p>
</blockquote>
<h2 id="功能一览"><a href="#功能一览" class="headerlink" title="功能一览"></a>功能一览</h2><h4 id="终端："><a href="#终端：" class="headerlink" title="终端："></a><strong>终端：</strong></h4><p>SSH使用了WebSSH，直接可以在网页进行操作，当然，SSH客户端管理也更方便</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/b80477fa4cd7bee6.png"></p>
<h4 id="Filebrowsers"><a href="#Filebrowsers" class="headerlink" title="Filebrowsers"></a>Filebrowsers</h4><p>作为管理系统必不可少的文件浏览器，还是需要一个WebUI界面使管理服务器简便不少，可以修改系统文件，界面简介支持打包上下载，预览视频图片，文本编辑</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/919189620575d459.png"></p>
<h4 id="高效的文件共享服务器和管理功能"><a href="#高效的文件共享服务器和管理功能" class="headerlink" title="高效的文件共享服务器和管理功能"></a>高效的文件共享服务器和管理功能</h4><p>为了实现远程系统管理，文件传输等功能，需要使用以上协议来进行，SSH也可以通过SCP来实现远程文件共享，且方便于管理系统文件<br>我们可以不用使用命令行来配置这些服务，我们只需用OMV-Panel来配置这些服务，这次可以使用共享文件夹来添加路径，设置用户权限等</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/304e48e956594f3b.png"></p>
<hr>
<p><strong>OMV-WebPanel，在浏览器内使用图形界面方便使用以下功能：</strong></p>
<p>· 磁盘管理与挂载，系统证书及权限管理，计划任务等</p>
<p>· 系统异常邮件通知</p>
<p>· Docker-功能一键开启，简易管理其镜像和容器</p>
<p>· FTP/NFS/SMB 文件传输协议，在相应客户端内可以轻松远程管理磁盘文件</p>
<p>· Rsync 文件传输同步功能 远程同步磁盘文件</p>
<p>· SSH 一键开启终端管理</p>
<p><strong>省去了使用命令行和脚本的麻烦，很有效率</strong></p>
<hr>
<p><em>SCP协议下管理文件，安卓客户端使用X-Plore</em></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/7be7f9ddfc8373f1.png"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/b3bb4e12652df066.png"></p>
<p>开启SAMBA服务后windows网络会直接扫描局域网内的SAMBA服务器，这三种协议里面SAMBA倒是没我想象的那么快，而且不知道为什么很不稳定</p>
<p>在基于我的网络环境，配合千兆网口，搭配超5类线缆和支持千兆口的路由器，当然传输速度也会受到下载软件客户端和目标机硬盘速率的影响，我倾向于使用Http协议传输，速度可以到达50M/s</p>
<h4 id="NextCloud-Seafile-可道云-易有云"><a href="#NextCloud-Seafile-可道云-易有云" class="headerlink" title="NextCloud/Seafile/可道云/易有云"></a>NextCloud/Seafile/可道云/易有云</h4><p><strong>· Seafile</strong></p>
<hr>
<p>Seafile是可以强大的文件管理和文件同步神器，而且位于Seafile文件库的文件已经被切片加密，别人无法用其他的方式直接盗取你的文件，所以Seafile的安全性较佳</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/a93abe45ba619396.png">1.需要<strong>Nginx/Apache+SQL+PHP</strong>环境，并且需要<strong>Python 2.0</strong>以上的版本</p>
<blockquote>
<p><em>你可以使用Web环境一键配置软件，在本文中提供的我家云固件已经部署了Web环境，而乘风固件已经部署好了Seafile，只需运行配置脚本即可部署完成</em></p>
</blockquote>
<p>2.根据官方文档中编辑网络环境配置文件，之后运行部署脚本</p>
<blockquote>
<p>官方文档：<a href="https://cloud.seafile.com/published/seafile-manual-cn/deploy/deploy_with_nginx.md">https://cloud.seafile.com/published/seafile-manual-cn/deploy/deploy_with_nginx.md</a></p>
</blockquote>
<p><em>在命令行填写配置时建议除了Host填写你的主机域名外其他均默认配置，否则要是配置错误重新配置的话会很难搞</em><br><em>安装完后设置中两个Host不能使用localhost或127.0.0.1，你需要设定你的主机域名</em><br><em>注意:配置过程中建议除了Host输入你的主机ip外其他一律默认配置，按照配置输入好sql数据库Root的密码</em></p>
<p><strong>优点：强大的同步功能，分片功能使安全性较佳；强大的共享功能和用户组功能</strong></p>
<p><strong>缺点：软件不是很轻便，运行比较慢，部署繁杂，且文件管理方面功能较少；而且因为文件被分片加密了你只能在Seafile管理该文件，无法共享储存库</strong></p>
<hr>
<p>· <strong>易有云</strong></p>
<hr>
<p><img src="https://www.ddnsto.com/linkease/pages/zh-cn/features/preview/APP%E9%A6%96%E9%A1%B5%E5%88%86%E7%B1%BB.jpg" alt="APP首页分类.jpg"></p>
<p><img src="https://www.ddnsto.com/linkease/pages/zh-cn/features/preview/%E7%BC%96%E8%BE%91md.jpg" alt="编辑md.jpg"></p>
<p><strong>安装</strong></p>
<blockquote>
<p><a href="https://www.ddnsto.com/linkease/#/zh-cn/tutorial/NAS/Linux">https://www.ddnsto.com/linkease/#/zh-cn/tutorial/NAS/Linux</a></p>
<p>乘风固件已经部署好完成易有云，只需要进入去设置用户账号密码即可</p>
</blockquote>
<p><strong>优点：</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>功能</th>
<th>描述</th>
<th>支持的主机类型</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>增量传输</td>
<td>每次只计算传输改动部分，省流量，省时间</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>2</td>
<td>大文件上传</td>
<td>单次上传支持20G大文件</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>3</td>
<td>批量上传无限制</td>
<td>客户端单次上传，不限制文件数量</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>4</td>
<td>多文件在线压缩</td>
<td>多文件自动合并压缩</td>
<td>PC、NAS</td>
</tr>
<tr>
<td>5</td>
<td>在线解压</td>
<td>客户端压缩包文件无需下载，在线解压</td>
<td>PC、NAS</td>
</tr>
<tr>
<td>6</td>
<td>自动备份</td>
<td>手机专享视频及图片备份，支持原画级别</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>7</td>
<td>一键备份</td>
<td>一键上传终端文件，即时操作，自动去重</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>8</td>
<td>文件智能分类</td>
<td>智能识别文件格式，标签分类更丰富</td>
<td>NAS</td>
</tr>
<tr>
<td>9</td>
<td>文件同步</td>
<td>本地文件变动自动同步到云端，无需手动操作</td>
<td>PC、NAS</td>
</tr>
<tr>
<td>10</td>
<td>多云端同步</td>
<td>支持跟百度云、azure 云、Google Cloud 等公有云数据同步</td>
<td>暂未开放</td>
</tr>
<tr>
<td>11</td>
<td>跨设备传输</td>
<td>多设备间文件可在线互转</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>12</td>
<td>多人共享设备</td>
<td>一台设备可供多人使用，不仅仅满足个人需求，更满足家庭需求</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>13</td>
<td>视频倍速播放</td>
<td>快慢轻松切换，一手掌握看剧速度</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>14</td>
<td>视频外挂字幕</td>
<td>视频语言随心换</td>
<td>路由器、PC、NAS</td>
</tr>
<tr>
<td>15</td>
<td>复制文件至终端任意文件夹</td>
<td>客户端可直接复制设备文件，到本地终端的任一文件夹，方便用户查找管理。</td>
<td>Andorid</td>
</tr>
<tr>
<td>16</td>
<td>微信文件传输至设备</td>
<td>可直接在微信中将文件传输至设备</td>
<td>iOS</td>
</tr>
<tr>
<td>17</td>
<td>支持Markdown文档</td>
<td>可直接在线创建编辑，并生成Html</td>
<td>PC</td>
</tr>
</tbody></table>
<p><strong>缺点：过于依赖官方的在线支持</strong></p>
<hr>
<p>· <strong>可道云</strong></p>
<hr>
<p>可道云是著名的国产私有云盘软件-你可以在服务器内搭建自己的本地云盘，而不依赖于百度云等服务，相当于自己提供自己云盘服务，如果你可以把私有云映射到公网使用，你甚至可以把此当做由你控制的”百度云”<br><a href="https://imgchr.com/i/BVyJh9"><img src="https://s1.ax1x.com/2020/10/24/BVyJh9.png" alt="BVyJh9.png"></a></p>
<p><strong>安装</strong></p>
<blockquote>
<p>1.需要Nginx，PHP，MySQL环境</p>
<p>2.可道云分为新版的KODEBOX和老版的KODEXPLORER，新版在老版的基础上改进了操作，添加了新的功能；<br>在官网选择你需要的版本并下载软件包，解压到你想要的文件夹</p>
<p>3.先Niginx配置文件，在Vhost文件中添加kode.ini文件，在其中添加Kode的端口和你的软件包解压路径，保存后重启系统，再把Kode云安装文件夹用Chmod设定成777权限<br>4.打开网页，这时可道云会帮你自动配置</p>
<p><em>乘风固件已经部署好完成Kodexplorer，只需要进入去设置用户账号密码即可，但是KodeBox提供了大量的功能改进，建议使用乘风固件的用户进行重新部署把Kodexplorer替换为KodeBox</em></p>
</blockquote>
<p><img src="https://i.loli.net/2020/10/24/ALboM6pTkCjqyZK.png" alt="image-20201024192546259"></p>
<p><img src="https://i.loli.net/2020/10/24/x9Nrs6AC3wYWJap.png" alt="image-20201024192606362"></p>
<p><img src="https://i.loli.net/2020/10/24/rRUupKOthswMGXg.png" alt="image-20201024192736758"></p>
<p><img src="https://i.loli.net/2020/10/24/KtTDJ9ZHM2Rykaq.png" alt="image-20201024192905454"><br><a href="https://imgchr.com/i/BVsUeS"><img src="https://s1.ax1x.com/2020/10/24/BVsUeS.png" alt="BVsUeS.png"></a></p>
<p><img src="https://i.loli.net/2020/10/24/dBl81poL7rQ42ix.jpg" alt="Screenshot_20201024_193013"></p>
<p><strong>优点：资源管理器式文件管理且支持Windows主题；网页桌面非常漂亮；扩展多，支持浏览或编辑各种文件：支持移动/桌面客户端；小巧轻便运行流畅，易于部署；用户组功能强大</strong></p>
<p><strong>缺点：不能设置储存库的路径，只能手动切换到路径中管理，这使人会认为比起私有云更像是个功能强大的文件管理器；下载与上传优化差，下载速度堪忧，上传时分片上传会占用大量CPU资源，且会积累大量文件缓存，硬件配置差的话上传经常会失败，这个缺点已经最新版本的KodeBox中改进</strong></p>
<h4 id="数据库配置-PHPMyAdmin"><a href="#数据库配置-PHPMyAdmin" class="headerlink" title="数据库配置-PHPMyAdmin"></a>数据库配置-PHPMyAdmin</h4><p>这是一个Web数据库管理工具<br>安装后就可以在此方便的配置数据库，添加和管理数据库，简化了对服务器的管理</p>
<p><img src="https://i.loli.net/2020/10/24/Babz5TNs4EgXDow.png" alt="image-20201024185711280"></p>
<h4 id="搭建个人网站-使用动态网页来搭建并运行网站"><a href="#搭建个人网站-使用动态网页来搭建并运行网站" class="headerlink" title="搭建个人网站-使用动态网页来搭建并运行网站"></a>搭建个人网站-使用动态网页来搭建并运行网站</h4><p>如果你需要建立个人博客，当今最流行的就是使用<strong>WordPress</strong>来建立，WordPress有强大的社区支持，简易方便的网站管理功能，有些情况你几乎不用写几个命令行就能完成对网站的建立，也不需要有什么前端知识，其提供了大量的主题，插件，模板，所以在Wordpress里面建立个逼格满满的博客不是什么难事<br>而动态网站对比其静态网站，其使用数据库支持，所以实现很多功能还是比较容易</p>
<p><img src="https://i.loli.net/2020/10/24/omvBTrCVLgUZ4KN.png" alt="image-20201024191606718"></p>
<p>我在这写一个博客</p>
<p><img src="https://i.loli.net/2020/10/24/SRxfE9Oo1cJw4BI.png" alt="image-20201024191746326"></p>
<p>更换一个称心的主题</p>
<p><img src="https://i.loli.net/2020/10/24/v1lbPehZfn3aLSB.png" alt="image-20201024191819230"></p>
<p><img src="https://i.loli.net/2020/10/24/hlgncrZITuY2ejW.png" alt="image-20201024191848166"></p>
<p>安装插件</p>
<p><img src="https://i.loli.net/2020/10/24/KA2GZn65atQh9U8.png" alt="image-20201024192009788"></p>
<p>评论系统也不需要额外配置</p>
<p><img src="https://i.loli.net/2020/10/24/eXSW3sun8yqm9ph.png" alt="image-20201024191944164"></p>
<h4 id="搭建个人网站-使用静态网页来搭建并运行网站"><a href="#搭建个人网站-使用静态网页来搭建并运行网站" class="headerlink" title="搭建个人网站-使用静态网页来搭建并运行网站"></a>搭建个人网站-使用静态网页来搭建并运行网站</h4><p>静态网页的搭建，可以使用 <strong>Jekyll、Hugo、Hexo</strong>等框架来搭建，在我的情况里，我使用了<strong>Hexo</strong>，Hexo是一个运行在nodejs里的静态网页服务框架，操作也比较简便，功能比起Jekyll也稍多，也有庞大的社区支持</p>
<p><strong>安装</strong></p>
<p>Hexo官方文档讲的非常详细，需要Nodejs和Git，我们根据官方文档所指引的在Linux系统上安装，Windows对于Nodejs和Git安装比较方便，都有相应的桌面安装程序</p>
<p>1.安装Nodejs</p>
<p>可以使用很多方式安装，比如带安装脚本的curl或者wget命令，或者直接从官网下载编译好的包安装，我这里使用NodeSource，因为curl和wget我连不上服务器</p>
<blockquote>
<p><a href="https://github.com/nodesource/distributions">https://github.com/nodesource/distributions</a></p>
</blockquote>
<p>在上面的Github说明文档找到你对应系统的命令，因为我的系统是OMV，是基于Debian开发的，所以找到Debian的安装命令，输入命令行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_current.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>从服务器下载有点慢，要等好久</p>
<p>2.安装Git</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-   Linux (Ubuntu, Debian)：sudo apt-get install git-core</span><br><span class="line">-   Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</span><br></pre></td></tr></table></figure>

<p>3.安装Hexo</p>
<p>切换国内npm源，我们使用阿里淘宝源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>指定你的存放数据的Hexo文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd xx&#x2F;xx&#x2F;xx&#x2F;</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>4.配置Git推送</p>
<hr>
<p><em>以Github为例</em></p>
<p>一.创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io</p>
<p>二. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>三.添加SSH Key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>

<p>四.把SSH Key粘贴到Github设置页面</p>
<p>五.测试SSH Key是否有效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<hr>
<p>5.配置Hexo</p>
<hr>
<p>一.生成网页源文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo initi</span><br></pre></td></tr></table></figure>

<p>二.下载主题放入 <strong>themes</strong> 文件夹中</p>
<p>三.编辑配置文件 <strong>_config.yml</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置主题</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: xxxxxx</span><br><span class="line">设置服务器与部署选项</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &quot;git&quot;</span><br><span class="line">  repo: xxxxxxxx</span><br><span class="line">  branch: master</span><br><span class="line">设置站点信息</span><br><span class="line"># Site</span><br><span class="line">title: xxx</span><br><span class="line">subtitle:  xxx</span><br><span class="line">description: xxx</span><br><span class="line">keywords: xxx</span><br><span class="line">author: xxx</span><br><span class="line">language: en</span><br><span class="line">timezone: &#39;&#39;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;example.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: xxxxxx</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#39;index.html&#39; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#39;.html&#39; from permalinks</span><br></pre></td></tr></table></figure>

<p>四.编辑主题配置文件，请参照 主题说明文档</p>
<p>编辑主题路径的 _config.yml 配置博客功能</p>
<p>五.测试网页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>自动部署到局域网中，在Localhost:4000中即可查看你的网页</p>
<p>六.生成网页文件并部署上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="https://i.loli.net/2020/10/24/O41FwiWCGpbeDJR.png" alt="image-20201024192151783"></p>
<p>中间在Git配置SSH的时候碰到了一个小插曲，我设置SSH公钥，在git上绑定，最后验证SSH总是别人的git账号，而且我并不知道是谁的<br>于是我想到我使用的系统是乘风的固件，应该是乘风大佬已经在系统里面配置了SSH公钥吧，打开Root路径后果然，里面不是我的SSH私钥，删除重新配置后我终于见到我的用户名了</p>
<hr>
<p>我使用了脚本和自动定时任务来管理Hexo网页</p>
<p>首先安装Corntab:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install crontab</span><br></pre></td></tr></table></figure>

<p>进入Corntab命令编辑页面:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">corntab -e</span><br></pre></td></tr></table></figure>

<p>之后会让你选择哪个vim编辑器，我使用了nano<br>添加定时任务:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* */4 * * * cd /sharedfolders/ud/hexo/Blog &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d #每4小时自动部署</span><br></pre></td></tr></table></figure>

<p>输入 crontab -l可查看你设定的定时任务</p>
<hr>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>Docker可以用来干什么，可好玩哩！<br>Docker是一个虚拟环境，他可以把软件集成到虚拟环境中，并自动集成依赖包，方便管理，也不怕搞把系统弄得乱七八糟，不用装这个装那个依赖包，不用输这个输那个命令行安装，只需Pull下来设置路径就可以用了</p>
<p><img src="https://i.loli.net/2020/10/25/ROUX5Iaszj13W8h.png" alt="u=1589818293,2913011842&amp;fm=26&amp;gp=0"></p>
<p>OMV自动Docker相关设置，在OMV-Extra里面即可找到</p>
<p><img src="https://i.loli.net/2020/10/24/2OcLtk4Euqx96WR.png" alt="image-20201024175820057"></p>
<p>安装后重启，在OMV管理界面即可找到Docker</p>
<p><img src="https://i.loli.net/2020/10/24/THsuAiQFhIakVBt.png" alt="image-20201024175918723"></p>
<p>之后设置中国科技大学的Docker源，打开/etc/docker/deamon.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&#x2F;&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/10/24/lZr1wgWsetcpPFi.png" alt="image-20201024180129801"></p>
<p><strong>OMV管理面板的Docker界面还是功能太少，我于是安装了porttainer</strong></p>
<hr>
<p>如何安装，首先下载中文汉化包解压到在我们根目录创建的Public文件夹</p>
<p><a href="https://wwa.lanzous.com/iBADihpblqf">https://wwa.lanzous.com/iBADihpblqf</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip public.7z</span><br></pre></td></tr></table></figure>

<p>之后用命令行安装arm64版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d --name portainer -p 9000:9000 -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data -v &#x2F;public:&#x2F;public portainer&#x2F;portainer:linux-arm64</span><br></pre></td></tr></table></figure>

<p>设置好相关配置</p>
<p>打开localhost: 9000  即可登陆Portainer界面</p>
<p><img src="https://i.loli.net/2020/10/24/P1ie8SvdpVfoAnt.png" alt="image-20201024180744576"></p>
<p>对Docker轻松管理，还支持直接下载镜像来安装Docker，十分舒服</p>
<p><img src="https://i.loli.net/2020/10/24/1dVb9E6OJL7HrDj.png" alt="image-20201024180821290"></p>
<hr>
<h4 id="当作下载机-AriaNG与Transmission"><a href="#当作下载机-AriaNG与Transmission" class="headerlink" title="当作下载机-AriaNG与Transmission"></a>当作下载机-AriaNG与Transmission</h4><p>Transmission被称作神级下载工具，在Linux系统里面非常热门的下载工具，在下载BT种子上面有众多的功能</p>
<p><img src="https://i.loli.net/2020/10/25/DlnOhESwtp1LovM.jpg" alt="img"></p>
<p>其特点是开源、无广告，硬件资源消耗极少，界面极度精简，支持BT<a href="https://www.smzdm.com/fenlei/zhongzi/">种子</a>和磁力链接下载，支持web界面、远程控制等</p>
<p>Transmission有一个非常友好的WebUI界面，这对我没有系统图形界面只有操作行的人来说非常友好，节省了一大批性能资源</p>
<p><img src="https://i.loli.net/2020/10/24/HJBxFRC9mjSud4p.png" alt="image-20201024174615415"></p>
<p>设定好路径后即可进行种子下载，如果种子源不错的话用这个软件下载速度还是很快的</p>
<p><img src="https://i.loli.net/2020/10/24/1GSYdAZRPCmwNix.png" alt="image-20201024174940163"></p>
<p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install transmission-cli transmission-common transmission-daemon</span><br><span class="line">systemctl start transmission-daemon.service</span><br><span class="line">systemctl status transmission-daemon.service</span><br><span class="line">systemctl stop transmission-daemon.service</span><br></pre></td></tr></table></figure>



<p><strong>修改配置文件</strong></p>
<p>修改/var/lib/transmission/.config/transmission-daemon/settings.json的配置文件</p>
<p><strong>启动服务</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">transmission-daemon</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure>

<p>localhost:9091即可打开</p>
<p>把这里的用户名密码设置一下</p>
<p><img src="https://i.loli.net/2020/10/24/HeYlr3fwpcAWdPC.png" alt="image-20201024182253074"></p>
<p>ariaNG有什么用呢，熟悉的小伙应该知道很多百度云不限速下载就是用的这个东西，但是你想在Linux里面搞Aria2，那你应该被连下载都要输入一大堆命令行而搞的心烦意乱，现在我们有了AriaNG，一个图形化Aria2下载界面</p>
<p><img src="https://i.loli.net/2020/10/24/RSnQbq3TeXGhCPZ.png" alt="image-20201024183733895"></p>
<p>有了这些有什么用呢，这样我可以在家随时把东西高速下载到我的服务器硬盘，然后再用可道云管理使用这些文件，随时下载到我的手机，电脑使用，然后映射到公网的话，在外也能通过网页下载到家里的服务器了</p>
<h4 id="Web办公前端-DzzOffice-搭建本地的在线办公套件"><a href="#Web办公前端-DzzOffice-搭建本地的在线办公套件" class="headerlink" title="Web办公前端-DzzOffice-搭建本地的在线办公套件"></a>Web办公前端-DzzOffice-搭建本地的在线办公套件</h4><p>DzzOffice 是一套开源办公套件，适用于企业、团队搭建自己的 类似“Google企业应用套件”、“微软Office365”的企业协同办公平台.</p>
<p>DzzOffice 由多个开源办公应用组成，安装Dzz框架后通过内部的应用 市场根据需要选择安装。可单独使用一款应用，也可多种应用组合使用。</p>
<p><img src="https://static.oschina.net/uploads/space/2018/0323/183011_rQv7_265656.png" alt="img"></p>
<p>DzzOffice 与企业微信、钉钉结合使用，扩展移动办公和沟通能力， 无论同事身处何地，都能轻松展开协作</p>
<p><img src="http://dzzoffice.com/images/dingding.png" alt="img"></p>
<p>通过Gitee下载:</p>
<p><a href="https://gitee.com/zyx0814/dzzoffice/releases">https://gitee.com/zyx0814/dzzoffice/releases</a></p>
<p>部署教程:和前面的可道云一样</p>
<p>另外，可道云里面也内置了这个服务</p>
<p>登陆进去后可以选择如上图所示的各项功能，这里我打开文档</p>
<p><img src="https://i.loli.net/2020/10/24/a86hgIHPMJZG1dn.png" alt="image-20201024184752341"></p>
<p>如果你部署了OnlyOffice服务器，之后链接到DzzOfice里面，你就可以在浏览器上的网页进行Office编辑，还可以在局域网内团队协作共同使用Office，这个界面和电脑上的office很像了</p>
<p><img src="https://i.loli.net/2020/10/24/PNw3ZtlXOAGxho7.png" alt="image-20201024184917257"></p>
<h4 id="媒体库服务器-Jellyfin"><a href="#媒体库服务器-Jellyfin" class="headerlink" title="媒体库服务器-Jellyfin"></a>媒体库服务器-Jellyfin</h4><p>片太多了怎么办，Jellyfin可以帮你搭建影音媒体库，并配对元数据，并且还拥有强大的影音管理功能，强大的播放功能，解码而且支持4K，字幕插入，直播点播，节目录制，让你拥有类似于爱奇艺等视频平台的观影体验</p>
<blockquote>
<p><a href="https://jellyfin.org/docs/">https://jellyfin.org/docs/</a>  文档：安装和使用方法及注意事项都在里面了</p>
</blockquote>
<p>Jellyfin是开源软件，完全免费，对比起高额费用的EMBY来说真是良心，并且拥有PC，TV，Android，IOS客户端</p>
<p><img src="https://i.loli.net/2020/10/25/xJ6iuc4WETK1PCh.png" alt="5d208cec9630e4742.png_e680"></p>
<p><img src="https://i.loli.net/2020/10/25/9PuE7aOBnlz1xJi.jpg" alt="5d208ebe796291826.jpg_e680"></p>
<p>注意：国外软件设置还是有点困难，特别是直播点播，媒体库配对识别。要注意配对元数据选择可以访问的元数据数据库，比如<a href="https://www.themoviedb.org/">The MoiveDB</a>，并且电影的文件路径与命名规则也要有规范，比如第几季第几集（S1E1）</p>
<h4 id="美化：导航与界面"><a href="#美化：导航与界面" class="headerlink" title="美化：导航与界面"></a>美化：导航与界面</h4><p><img src="https://i.loli.net/2020/10/24/z9CY3Aok2uUpgfw.png" alt="image-20201024181712754"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/04/41d2bc40258146e7.png"></p>
<h1 id="2-关于我家云的备份与导出镜像"><a href="#2-关于我家云的备份与导出镜像" class="headerlink" title="2.关于我家云的备份与导出镜像"></a>2.关于我家云的备份与导出镜像</h1><p><strong>原理：使用DD命令克隆整个磁盘，并转化为镜像文件</strong></p>
<p><strong>具体制作备份命令如下：</strong></p>
<p>假设你的硬盘设备是/dev/sda，执行如下命令会将镜像备份到/sharedfolders/backup/p.img，同时缩小镜像尺寸到3.5G</p>
<p><strong>注意：</strong>这两个东西在输入命令时要看清楚：</p>
<p>·系统所在磁盘路径：/dev/mmcblk1</p>
<p>·系统所在分区路径：/dev/mmcblk1p1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;sharedfolders&#x2F;backup&#x2F;</span><br><span class="line">sync</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;mmcblk1p1 of&#x3D;&#x2F;sharedfolders&#x2F;ud&#x2F;p0.ext bs&#x3D;1M</span><br><span class="line">#把整个分区拷贝成ext</span><br><span class="line">e2fsck -fy &#x2F;sharedfolders&#x2F;ud&#x2F;p0.ext</span><br><span class="line">#强制检查ext文件的正确性</span><br><span class="line">resize2fs -M &#x2F;sharedfolders&#x2F;ud&#x2F;p0.ext</span><br><span class="line">#减小文件系统到最小的大小</span><br><span class="line">resize2fs &#x2F;sharedfolders&#x2F;ud&#x2F;p0.ext 3500M</span><br><span class="line">#调整文件为3500M</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;mmcblk1 of&#x3D;&#x2F;sharedfolders&#x2F;ud&#x2F;p.img bs&#x3D;1M count&#x3D;16</span><br><span class="line">#拷贝硬盘的前16个块，每个块1M，并转换成img</span><br><span class="line">dd if&#x3D;&#x2F;sharedfolders&#x2F;ud&#x2F;p0.ext of&#x3D;&#x2F;sharedfolders&#x2F;ud&#x2F;p.img bs&#x3D;1M seek&#x3D;16</span><br><span class="line">#把ext文件(分区备份)的块和img(硬盘头扇区引导数据)文件的块合并，并覆盖ext文件的前16个块</span><br><span class="line">mv p.img omv-p2.img</span><br><span class="line">#改名</span><br><span class="line">tar zcvf omv-p2.tar.gz omv-p2.img</span><br><span class="line">#打包成tar</span><br><span class="line"></span><br><span class="line">#本备份使用DD命令，DD命令可以方便的备份整个硬盘的数据，包括引导分区等，此命令可以备份整个硬盘的数据并缩小备份包，由于DD命令可以完整的备份整个硬盘数据，所以其大小与硬盘大小一样，所以需要压缩，resize2fs需要先检查文件系统正确性，但直接备份整个硬盘的话备份并不是文件系统，所以无法缩小，此命令先备份分区数据再缩小分区数据的备份包，再把硬盘的引导分区合并到备份中，间接备份了整个硬盘。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>导出镜像文件，在AndroidTool里面就像刷机一样烧入镜像</p>
<h1 id="3-基于个人需求编写的维护脚本"><a href="#3-基于个人需求编写的维护脚本" class="headerlink" title="3.基于个人需求编写的维护脚本"></a>3.基于个人需求编写的维护脚本</h1><p><strong>考虑到效率问题，对服务器上某些功能的操作需要使用大量命令行，所以索性就写个脚本来一键管理服务器</strong></p>
<p>命令行输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bash /xxx/xxx/d.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/10/24/t6VFQwpAZONkuxj.jpg" alt="Screenshot_2020_1024_200233"></p>
<p>输入要执行命令的数字就可以了</p>
<p>本脚本可以：</p>
<p>·部署，更新HEXO网页</p>
<p>·直接把整个系统备份为镜像，直接在刷机工具恢复（注意刷完后在脚本按7里给机器扩容！！！）</p>
<p>·备份Docker，更改Docker数据路径</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/3342888c8a05f8d2.png"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/49ba7c7e53ebd546.png"></p>
<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p><strong>输入数字可以启动相应功能</strong></p>
<p><strong>HEXO</strong></p>
<p>在如下修改你的hexo路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">########################</span><br><span class="line">hexo&#x3D;&#39;&#x2F;sharedfolders&#x2F;ud&#x2F;hexo&#x2F;blog&#39;</span><br><span class="line">########################</span><br></pre></td></tr></table></figure>

<p>1.启动本地服务器预览网页</p>
<p>2.新建文章，输入名字可，再在hexo目录进行编辑文章</p>
<p>3.自动生成网站文件（hexo g）</p>
<p>4.自动生成网站文件并把网站上传到服务器 （hexo g + hexo d）</p>
<p><strong>备份工具</strong></p>
<p>5.把整个分区先备份为ext文件，再对ext文件进行文件系统缩容为指定大小生成第二个缩容后的img（镜像）文件，之后对ext文件打包为压缩包.tgz，进一步压缩其大小，目录下会生成3个文件（.ext .img .tgz）</p>
<p>6.把整个分区先备份为ext文件，再生成为img文件，目录下会生成2个文件  ( .ext .img)。</p>
<p><strong>系统工具</strong></p>
<p>7.分区恢复备份后进行扩容</p>
<p><strong>Docker工具</strong></p>
<p>8.对Docker进行移动数据文件，修改数据文件路径，备份及恢复数据文件，可以把所有容器和镜像还有设置备份起来</p>
<p><em>注意：有些容器恢复后需要重新安装</em></p>
<p>9.安装指定的容器</p>
<p>在下面代码段写入安装指令即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function dockerinstall()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot; Install.............. &quot;</span><br><span class="line">docker run -d --name portainer -p 9000:9000 -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data -v &#x2F;public:&#x2F;public --restart&#x3D;unless-stopped portainer&#x2F;portainer:linux-arm64</span><br><span class="line">docker run -d --name&#x3D;calibre-web -e PUID&#x3D;1000 -e PGID&#x3D;1000 -e TZ&#x3D;Asia&#x2F;Shanghai -p 8083:8083 -v &#x2F;home&#x2F;docker&#x2F;calibreweb:&#x2F;config -v &#x2F;sharedfolders&#x2F;hd&#x2F;ebook:&#x2F;books --restart unless-stopped gsp8181&#x2F;calibre-web</span><br><span class="line">IMAGE_NAME&#x3D;80x86&#x2F;filebrowser</span><br><span class="line">WEB_PORT&#x3D;8866</span><br><span class="line">FB_AUTH_SERVER_ADDR&#x3D;&quot;127.0.0.1&quot;</span><br><span class="line">docker run -d --name fb --restart&#x3D;unless-stopped -e PUID&#x3D;$UID -e PGID&#x3D;$GID -e WEB_PORT&#x3D;$WEB_PORT -e FB_AUTH_SERVER_ADDR&#x3D;$FB_AUTH_SERVER_ADDR -p $WEB_PORT:$WEB_PORT -v &#x2F;home&#x2F;docker&#x2F;fb:&#x2F;config -v &#x2F;:&#x2F;myfiles --mount type&#x3D;tmpfs,destination&#x3D;&#x2F;tmp $&#123;IMAGE_NAME&#125;:arm64</span><br><span class="line">docker run -d --name&#x3D;baidupcs --restart always -v &#x2F;sharedfolders&#x2F;ud&#x2F;DownLoad:&#x2F;app&#x2F;Downloads -v &#x2F;home&#x2F;docker&#x2F;BaiduPCS:&#x2F;app&#x2F;.config&#x2F;BaiduPCS-Go -p 5299:5299 80x86&#x2F;baidupcs:latest</span><br><span class="line">echo &quot; Install Complete &quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!--more-->

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">function initUI() </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">while [ true ]</span><br><span class="line">do</span><br><span class="line">more -16 /opt/TAU.txt</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo &quot;-------------------------&quot;</span><br><span class="line">echo &quot;---NAS-MANAGEMENT-TOOLS--&quot;</span><br><span class="line">echo &quot;--------Ver:0.2----------&quot;</span><br><span class="line">echo &quot;--------by OT-22---------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;                             = HEXO-TOOL =&quot;</span><br><span class="line">echo &quot; 1. start server &quot;</span><br><span class="line">echo &quot; 2. upload post&quot;</span><br><span class="line">echo &quot; 3. auto update &quot;</span><br><span class="line">echo &quot; 4. auto deploy &quot;</span><br><span class="line">echo &quot;                             = BACKUP-TOOL = &quot;</span><br><span class="line">echo &quot; 5. !!! BACKUP SYSTEM IMG And Resize to custom size Then compress to TGZ  !!! &quot;</span><br><span class="line">echo &quot; 6. !!! BACKUP SYSTEM IMG Without Compress !!! &quot;</span><br><span class="line">echo &quot;                             = SYSTEM-TOOL = &quot;</span><br><span class="line">echo &quot; 7. Resize File System When you Recovery Backup &quot;</span><br><span class="line">echo &quot;                             = DOCKER-TOOL = &quot;</span><br><span class="line">echo &quot; 8. Moving Docker Data to p2; Recovery and Backup Docker Data &quot;</span><br><span class="line">echo &quot; 9. Install Docker cotainer &quot;</span><br><span class="line">echo &quot;  &quot;</span><br><span class="line">echo &quot;  Please set HEXO PATH by &#x27; vi /opt/d.sh &#x27; edit &#x27; hexo = &#x27;  &quot;</span><br><span class="line">echo &quot;                             != Backup instructions =!&quot;</span><br><span class="line">echo &quot;!= Backup 1 step will generate a file system copy in ext format =!&quot;</span><br><span class="line">echo &quot;!= Backup 2 step will Check the correctness of the ext file system,Make sure your backup and resize operate is available =!&quot;</span><br><span class="line">echo &quot;!= Backup 3 step will resize the copy and generate a backup image =!&quot;</span><br><span class="line">echo &quot;!= FOR MORE, PLEASE CHECK https://ot22.gitee.io/2020/10/17/omvbackup/ &quot;</span><br><span class="line">echo &quot; When you type path in this scrip,Dot not type / at the end of the path character,Such as &#x27;/root/data/&#x27; is invalid,You should &#x27;&#x27;/root/data&#x27; &quot;</span><br><span class="line">echo &quot;  &quot;</span><br><span class="line">echo -n &quot; Please enter : &quot;</span><br><span class="line">echo &quot;  &quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######################</span></span></span><br><span class="line">hexo=&#x27;/sharedfolders/ud/hexo/blog&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######################</span></span></span><br><span class="line"></span><br><span class="line">read num</span><br><span class="line"></span><br><span class="line">if [ -z $num ];then</span><br><span class="line">exit 0</span><br><span class="line">elif [ $num = 1 ];then</span><br><span class="line">startServer</span><br><span class="line">elif [ $num = 2 ];then</span><br><span class="line">uploadpost</span><br><span class="line">elif [ $num = 3 ];then</span><br><span class="line">autoUpdate</span><br><span class="line">startServer</span><br><span class="line">elif [ $num = 4 ];then</span><br><span class="line">autoDeploy</span><br><span class="line">elif [ $num = 5 ];then</span><br><span class="line">backup1</span><br><span class="line">elif [ $num = 6 ];then</span><br><span class="line">backup2</span><br><span class="line">elif [ $num = 7 ];then</span><br><span class="line">resizesystem</span><br><span class="line">elif [ $num = 8 ];then</span><br><span class="line">dockermove</span><br><span class="line">elif [ $num = 9 ];then</span><br><span class="line">dockerinstall</span><br><span class="line">elif [ $num = 11 ];then</span><br><span class="line">liltest</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># elif [ $num = # ];then</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">echo &quot;Input error !!!!!!&quot;</span><br><span class="line">fi</span><br><span class="line">done </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function read_yes_no () </span><br><span class="line">&#123;</span><br><span class="line">    printf &quot;[yes|no] &quot;</span><br><span class="line">    read yesno;</span><br><span class="line">    while [[ &quot;$&#123;yesno&#125;&quot; != &quot;yes&quot; &amp;&amp; &quot;$&#123;yesno&#125;&quot; != &quot;no&quot; ]]</span><br><span class="line">    do</span><br><span class="line">        printf &quot;please answer [yes|no] &quot;</span><br><span class="line">        read yesno;</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [[ &quot;$&#123;yesno&#125;&quot; == &quot;no&quot; ]]; then</span><br><span class="line">        return 1;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function startServer() </span><br><span class="line">&#123;</span><br><span class="line">cd $hexo</span><br><span class="line">hexo s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function uploadpost()</span><br><span class="line">&#123;</span><br><span class="line">cd $hexo</span><br><span class="line">read -t 20 -p &quot;input your title &quot; a</span><br><span class="line">hexo new $a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function autoUpdate()</span><br><span class="line">&#123;</span><br><span class="line">cd $hexo</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function backup1() </span><br><span class="line">&#123;</span><br><span class="line">read -t 20 -p &quot;Your backup path is &quot; backup0</span><br><span class="line">read -t 20 -p &quot;Your IMG size(Mbyte) is &quot; size</span><br><span class="line">echo &quot; Your Path is $backup0  &quot;</span><br><span class="line">echo &quot; Your Size is $size  &quot;</span><br><span class="line"></span><br><span class="line">cd $backup0/</span><br><span class="line">sync</span><br><span class="line">dd if=/dev/mmcblk1p1 of=$backup0/p0.ext bs=1M</span><br><span class="line">e2fsck -fy $backup0/p0.ext</span><br><span class="line">resize2fs -M $backup0/p0.ext</span><br><span class="line">resize2fs $backup0/p0.ext $size</span><br><span class="line">dd if=/dev/mmcblk1 of=$backup0/p.img bs=1M count=16</span><br><span class="line">dd if=$backup0/p0.ext of=$backup0/p.img bs=1M seek=16</span><br><span class="line">mv p.img omv-p2.img</span><br><span class="line">tar zcvf omv-p2.tar.gz omv-p2.img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function backup2() </span><br><span class="line">&#123;</span><br><span class="line">read -t 20 -p &quot;Your backup path is &quot; backup0</span><br><span class="line">echo &quot; Your Path is $backup0  &quot;</span><br><span class="line"></span><br><span class="line">cd $backup0/</span><br><span class="line">sync</span><br><span class="line">dd if=/dev/mmcblk1p1 of=$backup0/p0.ext bs=1M</span><br><span class="line">e2fsck -fy $backup0/p0.ext</span><br><span class="line">resize2fs -M $backup0/p0.ext</span><br><span class="line">dd if=/dev/mmcblk1 of=$backup0/p.img bs=1M count=16</span><br><span class="line">dd if=$backup0/p0.ext of=$backup0/p.img bs=1M seek=16</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function autoDeploy()</span><br><span class="line">&#123;</span><br><span class="line">cd $hexo</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resizesystem()</span><br><span class="line">&#123;</span><br><span class="line">resize2fs /dev/mmcblk1p1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function dockermove()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot; Your Docker Path DON&#x27;NOT contain ./docker，It should be previous file of docker data.  &quot;</span><br><span class="line">echo &quot; Such as your docker file is &#x27;/home/docker&#x27;，Then you should type &#x27;/home&#x27;   &quot;</span><br><span class="line">echo &quot; The step is : BACKUP------&gt;RECOVERY------&gt;COPY------&gt;MOVE   &quot;</span><br><span class="line">read -t 20 -p &quot;input your docker path &quot; p2</span><br><span class="line">echo &quot; Your Path is $p2/docker  &quot;</span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line">echo &quot; BACKUP &quot;</span><br><span class="line">echo &quot; backup Docker Data? &quot;</span><br><span class="line"></span><br><span class="line">if  read_yes_no; then</span><br><span class="line">        cd $p2/docker</span><br><span class="line">        tar -cvpzf $p2/docker.tgz *</span><br><span class="line">    else</span><br><span class="line">        echo &quot; Let&#x27;s do next &quot;</span><br><span class="line">        echo &quot;  &quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">echo &quot; RECOVERY &quot;</span><br><span class="line">echo &quot; If you use docker data backup as a new docker data or not? &quot;</span><br><span class="line">echo &quot; Make sure you put docker.tgz in PATH &quot;</span><br><span class="line">echo &quot; Then you may be need to delete present docker data，YOU NEED DELETE? &quot;</span><br><span class="line"></span><br><span class="line">if  read_yes_no; then</span><br><span class="line">    echo &quot; TELL ME YOU ARE LUCID GUY &quot;</span><br><span class="line">    echo &quot; Now I will delete your docker data，continue????????????? &quot;</span><br><span class="line">        if  read_yes_no; then</span><br><span class="line">           rm -rf $p2/docker</span><br><span class="line">        else</span><br><span class="line">           echo &quot; Confirming you dont have docker data in target path &quot;</span><br><span class="line">           echo &quot;  &quot;</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo &quot; Confirming you dont have docker data in target path &quot;</span><br><span class="line">        echo &quot;  &quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">echo &quot; I will RECOVERY your Docker data from docker.tgz &quot;</span><br><span class="line"></span><br><span class="line">if  read_yes_no; then</span><br><span class="line">        mkdir -p $p2/docker</span><br><span class="line">        chmod -R 771 $p2/docker</span><br><span class="line">        tar -xvpzf $p2/docker.tgz -C $p2/docker</span><br><span class="line">    else</span><br><span class="line">        echo &quot; May be you already exsited a docker data &quot;</span><br><span class="line">        echo &quot;  &quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">echo &quot; COPY &quot;</span><br><span class="line">echo &quot;If you copy local docker data as a new docker data or not?&quot;</span><br><span class="line"></span><br><span class="line">if  read_yes_no; then</span><br><span class="line">        cp -avx /var/lib/docker $p2</span><br><span class="line">    else</span><br><span class="line">        echo &quot; Let&#x27;s do next &quot;</span><br><span class="line">        echo &quot;  &quot;</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot; REDIRECT &quot;</span><br><span class="line">echo &quot; Final Step，The default Docker data will set to Your docker data that you want to. &quot;</span><br><span class="line">echo &quot; Confirm execution? &quot;</span><br><span class="line">if  read_yes_no; then</span><br><span class="line">        echo &quot; Activating all containers ?  &quot;</span><br><span class="line">        echo &quot; it need to restart your server, Your server will POWER OFF SOON.  &quot;</span><br><span class="line">        if  read_yes_no; then</span><br><span class="line">           echo &quot;Nextly,Docker data will be moved. &quot;</span><br><span class="line">           echo &quot;REDIRECT----&gt;START CONTAINER----&gt;REBOOT SERVER &quot;</span><br><span class="line">           rm -rf /var/lib/docker</span><br><span class="line">           ln -s $p2/docker /var/lib/docker</span><br><span class="line">           dockerinstall</span><br><span class="line">           reboot</span><br><span class="line">        else</span><br><span class="line">           echo &quot;Nextly,Docker data will be moved. &quot;</span><br><span class="line">           rm -rf /var/lib/docker2</span><br><span class="line">           ln -s $p2/docker /var/lib/docker</span><br><span class="line">           exit 0</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        service docker start</span><br><span class="line">        exit 0</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function dockerinstall()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot; Install.............. &quot;</span><br><span class="line">docker run -d --name portainer -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data -v /public:/public --restart=unless-stopped portainer/portainer:linux-arm64</span><br><span class="line">docker run -d --name=calibre-web -e PUID=1000 -e PGID=1000 -e TZ=Asia/Shanghai -p 8083:8083 -v /home/docker/calibreweb:/config -v /sharedfolders/hd/ebook:/books --restart unless-stopped gsp8181/calibre-web</span><br><span class="line">IMAGE_NAME=80x86/filebrowser</span><br><span class="line">WEB_PORT=8866</span><br><span class="line">FB_AUTH_SERVER_ADDR=&quot;127.0.0.1&quot;</span><br><span class="line">docker run -d --name fb --restart=unless-stopped -e PUID=$UID -e PGID=$GID -e WEB_PORT=$WEB_PORT -e FB_AUTH_SERVER_ADDR=$FB_AUTH_SERVER_ADDR -p $WEB_PORT:$WEB_PORT -v /home/docker/fb:/config -v /:/myfiles --mount type=tmpfs,destination=/tmp $&#123;IMAGE_NAME&#125;:arm64</span><br><span class="line">docker run -d --name=baidupcs --restart always -v /sharedfolders/ud/DownLoad:/app/Downloads -v /home/docker/BaiduPCS:/app/.config/BaiduPCS-Go -p 5299:5299 80x86/baidupcs:latest</span><br><span class="line">echo &quot; Install Complete &quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line">initUI</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机</category>
        <category>服务器&amp;网络</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>运营维护</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>简单运用人工智能进行钢琴音频转换为音符数据(Midi)</title>
    <url>/2021/02/28/miditopiano/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>近期，字节跳动发布全球最大的古典钢琴数据集 GiantMIDI-Piano，包括来自 2,784 位作曲家 10,854 首作品的 MIDI 文件，总时长为 1,237 小时。研究者为完成该数据集的构建，开发并开源了一套高精度钢琴转谱系统</p>
</blockquote>
<p>这个项目在Github上叫做**<a href="https://github.com/bytedance">bytedance</a>/<a href="https://github.com/bytedance/GiantMIDI-Piano">GiantMIDI-Piano</a>**</p>
<p>是的，你没看错，<strong>字节跳动</strong>，旗下产品有我们最常用的抖音和今日头条，并通过短视频业务在国际开拓了广大的市场</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/966356746ad8b945.png"></p>
<p>而这项技术可牛逼了，我们知道，如果身边有弹奏钢琴的朋友，如果发现了一首不是很热门的钢琴曲，想把这首宝藏歌曲用钢琴弹奏下来，但是网上找了半天都没有找到相关的钢琴谱，这可怎么办，如果没有深入的钢琴与扒谱知识，那么是无法自己扒出钢琴谱的，也许还可以去<strong>淘宝委托别人扒谱，可这价格不是闹着玩的</strong>，即使你会扒谱，那么<strong>一首较为复杂的钢琴谱，你也需要一两天的时间与精力才能弄出来</strong>，或者你训练了音感<strong>，听歌即弹，这种大佬还是很少的</strong></p>
<a id="more"></a>

<p>学过音乐的朋友知道，扒谱是一件很复杂的脑力活，这种事情在以前认为几乎也只有人类可以胜任，机器人在文化艺术因为无法精确的模拟出人类的情感，在这些领域机器人还是望而止步的</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/de11e39c85ec7e7f.jpeg"></p>
<p>​                                    <em>电脑音乐的发展使得大量的Black-Midi曲涌现出来，这在电脑音乐方面可谓是一种奇观</em></p>
<p>人类的本质是<strong>懒</strong>，工业机器人的发展使得各种各样体力类劳动逐渐被机器取代，如今，即使是脑力的劳动在<strong>深度学习</strong>技术的发展下也即将被计算机取代。</p>
<p>我们前面了解了很多的机器学习与深度学习的案例，比如<strong>Deepfake</strong>的换脸与变脸技术，给人制作虚假的动作，甚至凭空生成世界上本不存在的人物图像与自动绘制动漫人物。</p>
<p>那么今天的这项算法其意义比如上所述的几项意义要大得多了。</p>
<h1 id="技术文献"><a href="#技术文献" class="headerlink" title="技术文献"></a>技术文献</h1><p><strong>论文：GiantMIDI-Piano：用于古典钢琴音乐的大规模MIDI数据集</strong></p>
<p>[1] Qiuqiang Kong, Bochen Li, Jitong Chen, and Yuxuan Wang. “GiantMIDI-Piano: A large-scale MIDI dataset for classical piano music.” arXiv preprint arXiv:2010.07061 (2020). <a href="https://arxiv.org/pdf/2010.07061">https://arxiv.org/pdf/2010.07061</a></p>
<p>[2] Qiuqiang Kong, Bochen Li, Xuchen Song, Yuan Wan, and Yuxuan Wang. “High-resolution Piano Transcription with Pedals by Regressing Onsets and Offsets Times.” arXiv preprint arXiv:2010.01815 (2020). <a href="https://arxiv.org/pdf/2010.01815">https://arxiv.org/pdf/2010.01815</a></p>
<h5 id="项目地址：-bytedance-GiantMIDI-Piano"><a href="#项目地址：-bytedance-GiantMIDI-Piano" class="headerlink" title="项目地址：**bytedance/GiantMIDI-Piano**"></a>项目地址：**<a href="https://github.com/bytedance">bytedance</a>/<a href="https://github.com/bytedance/GiantMIDI-Piano">GiantMIDI-Piano</a>**</h5><h5 id="详细介绍：https-zhuanlan-zhihu-com-p-269218623"><a href="#详细介绍：https-zhuanlan-zhihu-com-p-269218623" class="headerlink" title="详细介绍：https://zhuanlan.zhihu.com/p/269218623"></a>详细介绍：<a href="https://zhuanlan.zhihu.com/p/269218623">https://zhuanlan.zhihu.com/p/269218623</a></h5><p><strong>协议</strong>：<strong>CC BY 4.0</strong></p>
<h1 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h1><p>就先给各位展示一下这个技术，我们找来几个特别复杂的歌曲</p>
<p>找来几个歌曲中带有钢琴音色的各种类型的音乐，一起来测试一下，<strong>midi文件包含了这个歌曲的所以音符信息，所以可以直接转化为钢琴谱</strong></p>
<p><em>由于目前还无法实现嵌入式Midi播放，所以只给出结果或可在连接中自行下载</em></p>
<h3 id="1-古典与管弦类音乐"><a href="#1-古典与管弦类音乐" class="headerlink" title="1.古典与管弦类音乐"></a>1.古典与管弦类音乐</h3><p><strong>·李斯特 - Etude No.3 in G♯ minor “La Campanella” (S.141/3)</strong></p>
<p><em>怕与训练模型重复，所以挑选了一首与标准原曲有少许区别的版本</em></p>
<p>结果：几乎与原曲没有区别</p>
<p><strong>·肖邦 - 12 Etudes Op.25:No. 11 in A minor “Winter Wind”</strong></p>
<p><em>怕与训练的模型重复，所以挑选了一首与标准原曲有少许区别的版本</em></p>
<p>结果：几乎与原曲没有区别</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/5f60ad159cfd54ab.png"></p>
<p><strong>·削除 - I. Allegro Agitato （97鍵盤のための協奏曲 [Concerto for 97Keys]）</strong></p>
<p> 这首音乐是十分复杂的交响乐</p>
<p>结果：某些部分有明显错误，但其他部分基本正确但也有少许错误，个人感觉与原曲有85%的相似</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/1e7c6b243c120405.png"></p>
<p><em>直接转换过来的琴谱文件，但如果真的要能弹，琴谱也还需要少许处理</em></p>
<h2 id="2-流行音乐"><a href="#2-流行音乐" class="headerlink" title="2.流行音乐"></a>2.<strong>流行音乐</strong></h2><h5 id="·周杰伦-夜曲"><a href="#·周杰伦-夜曲" class="headerlink" title="·周杰伦 - 夜曲"></a><strong>·周杰伦 -</strong> 夜曲</h5><p>结果：个人感觉与原曲有76%的相似，但还是有一些杂音，但包含基本曲调</p>
<p><strong>·Beyond - 海阔天空</strong></p>
<p>结果：个人感觉与原曲有69%相似，杂音太多，但基本包含正确曲调</p>
<h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><p><strong>纯钢琴曲的精准度和介绍里谈到的无论是多么复杂的曲子精准度可达95%以上，流行音乐由于音轨太多，其他乐器交错在一起输出结果会包含过多杂音，但包含正确的曲调</strong></p>
<p><strong>纯钢琴曲由于制作出来的midi文件，不适合直接作谱，如果要使人看的懂且人弹的出来，还需要少许修改</strong></p>
<p><strong>其他音轨很多的音乐建议使用另一个乐器分离的AI模型进行轨道分离再进行识别转换</strong></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/3a31ae6268d8c2cf.png"></p>
<h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><p>这个教程直接使用由Python构建的版本，简单易用，复杂的地方为Python环境的配置</p>
<h2 id="下载链接："><a href="#下载链接：" class="headerlink" title="下载链接："></a>下载链接：</h2><p>包括主文件夹</p>
<p><a href="https://cloud.189.cn/t/F3qeaq3Mjy2u">https://cloud.189.cn/t/F3qeaq3Mjy2u</a> (访问码:hub3)</p>
<h3 id="程序结构："><a href="#程序结构：" class="headerlink" title="程序结构："></a><strong>程序结构：</strong></h3><p><strong>检查点文件（CheckPoint）</strong> <strong>note_F1=0.9677_pedal_F1=0.9186.pth</strong></p>
<p><strong>Python主程序（Master）</strong></p>
<p><strong>Python环境</strong>（建议3.7.8版本的Python）</p>
<h3 id="Step1-配置Python环境"><a href="#Step1-配置Python环境" class="headerlink" title="Step1: 配置Python环境"></a>Step1: 配置Python环境</h3><p><em>引用他人文章：<a href="https://blog.csdn.net/leege666/article/details/84557984">https://blog.csdn.net/leege666/article/details/84557984</a></em></p>
<p>上面有图而且很详细哦</p>
<p>1.下载Python程序包，在安装界面勾选自动配置环境变量</p>
<p>2.win+s键搜索cmd打开命令行，输入Python，看到如下界面即为安装成功</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/180c37b2b241933f.png"></p>
<p>3.配置软件需求环境</p>
<p>·切换pip源</p>
<p>进入 C:\Users\电脑用户\AppData\Roaming 文件夹（<strong>桌面的用户文件夹</strong>）中 ，新建 pip 文件夹并在文件夹中新建 pip.ini 配置文件 ，新增 pip.ini 配置文件</p>
<p>键入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">use-mirrors &#x3D;true</span><br><span class="line">mirrors &#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br><span class="line">trusted-host &#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.bmp.ovh/imgs/2021/03/75c9c92405d6c211.png"></p>
<p>·下载Pytorch</p>
<p>命令行键入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install torch&#x3D;&#x3D;&#x3D;1.0.0 torchvision&#x3D;&#x3D;&#x3D;0.2.1 -f https:&#x2F;&#x2F;download.pytorch.org&#x2F;whl&#x2F;cu100&#x2F;torch_stable.html</span><br></pre></td></tr></table></figure>

<p>·下载需求环境</p>
<p>命令行中分别键入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x: #打开master文件所在的盘符</span><br><span class="line">cd x:\xxx\xxxx\xxxx #打开master主程序的文件夹</span><br></pre></td></tr></table></figure>

<p>键入安装命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



<h2 id="Step2：配置检查点文件"><a href="#Step2：配置检查点文件" class="headerlink" title="Step2：配置检查点文件"></a>Step2：配置检查点文件</h2><p>在 ** C:\Users\用户名\ **  中新建  <strong>piano_transcription_inference_data</strong> 文件夹 </p>
<p>把<strong>note_F1=0.9677_pedal_F1=0.9186.pth</strong>放进上面的这个文件夹中</p>
<h2 id="Step3-解压主程序并运行"><a href="#Step3-解压主程序并运行" class="headerlink" title="Step3: 解压主程序并运行"></a>Step3: 解压主程序并运行</h2><p>主程序解压后，我们可以看到如下几个文件</p>
<p><strong>input</strong>文件夹 存放.mp3或.wav的歌曲原音频文件</p>
<p><strong>output</strong>文件夹 存放.midi的转换后的歌曲音频文件</p>
<p><strong>start -wav.py</strong>文件 转换input中.wav音频的python程序</p>
<p><strong>start.py</strong>文件 转换input中.mp3音频的python程序</p>
<p>只能放三首音频在input中，文件命名最后纯英文或数字，根据音频格式点击strat.py即可</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/9d8e1840eb7ccba8.png"></p>
<p><em>正常工作的画面</em></p>
<p>注意：<strong>机器学习的处理需要您的电脑有一张像样的显卡，建议英伟达GTX或RTX系列的显卡，因为支持CUDA，AMD绝大部分显卡不支持CUDA，所以处理时间需要15分钟以上，而支持CUDA的显卡只需1分钟，英伟达老式显卡不支持CUDA，AMD显卡能不能加速得看看程序对opencl的支持咯</strong></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>如今，也有许多网站或者平台把这个项目部署到其中作为商业化作用，所以有一些网站可以在线进行音符分析与文件转换</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/d706068d17677eb8.png"></p>
<p>其次，你还可以用<strong>Anaconda</strong>来搭建环境与配置，直接上手，或者在官方页用谷歌GPU平台搭建的在线进行使用</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Python部署并运用一阶运动模型对脸部图片进行简单的动作模拟</title>
    <url>/2020/12/15/deepfakeunreval/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在8月份的时候，B站就多了很多换脸视频，大多都是换了两个外国小哥小姐姐唱歌时候的动态脸照，分别在唱Unravel，Damedayo这两首很魔性的歌，由于视频动作夸张搞笑，而视频被“P”的很真实，收到了很多网友的喜爱<img src="https://i.loli.net/2020/10/15/IFKWxGhU1VM5ZwR.gif" alt="0">，而现在，很多视频网站已经把这个项目部署到了Web上，从而吸引用户进行视频创作，本文将讲述如何在个人计算机中搭建Python环境并运行此项目</p>
<p>而这项技术背后是机器学习项目中热门的<strong>一阶运动模型</strong>（First Order Motion），是通过AI的训练库来对动作进行准确的捕捉再用得出来的检查点对动作嵌入到图片来进行图片变换来生成几乎于逼真图形的技术</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/fa090772108749e0.jpg"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/03/b1886fcffd961967.png"></p>
<p>原理如上（反正我是一点都看不懂）</p>
<a id="more"></a>

<p>  连杜甫都被狠下毒手，还有唐僧等众多历史人物</p>
<p><img src="https://i.loli.net/2020/10/15/BaNAWlbZJKExIHL.gif" alt="0"></p>
<p>这一下看上去很真实，差不多到信以为真的程度，看起来有一种违和的搞笑感</p>
<p><img src="https://i.loli.net/2020/10/15/7esZvmrMgPR9FEK.png" alt="download"></p>
<p><strong>好活当赏</strong></p>
<p>就在大火大热之时，B站也有人发了制作这种视频的教程，本来也就很多研究git项目的大学生会耍耍嘛，视频中用到了<strong>Google colab</strong>，通过搭建好的脚本环境输入图片和预设就能导出一个Unravel的换脸视频了，一张照片就“痛“起来了，这项操作要求你：</p>
<p><strong>·拥有一个谷歌账号</strong></p>
<p><strong>·拥有科学上网工具</strong></p>
<p><strong>·拥有谷歌硬盘账号</strong></p>
<p><strong>·一点计算机知识</strong></p>
<p>然而这年头谷歌账号很难搞，很多人都是需要用购买，还有一大堆繁琐的步骤，而科学上网工具也需要一点互联网经验才能搞到</p>
<p>然而，在之后，好景不长，因为这个鬼畜带有几乎以假乱真，而且对原人物也是带有很强的侮辱性，所以，教程在各大网站都被封了………………….</p>
<h1 id="搭建Python在本地制作换脸视频"><a href="#搭建Python在本地制作换脸视频" class="headerlink" title="搭建Python在本地制作换脸视频"></a>搭建Python在本地制作换脸视频</h1><h5 id="今天的主角是著名的的项目，DeepFake一阶运动模型"><a href="#今天的主角是著名的的项目，DeepFake一阶运动模型" class="headerlink" title="今天的主角是著名的的项目，DeepFake一阶运动模型"></a>今天的主角是著名的的项目，DeepFake<strong>一阶运动模型</strong></h5><p>First Order Motion，也就是<a href="https://link.zhihu.com/?target=https://cuijiahua.com/blog/tag/%E4%B8%80%E9%98%B6%E8%BF%90%E5%8A%A8%E6%A8%A1%E5%9E%8B/">一阶运动模型</a>，来自 NeurIPS 2019 论文。</p>
<p>相关的项目地址：</p>
<p>·<a href="https://github.com/AliaksandrSiarohin/first-order-model">https://github.com/AliaksandrSiarohin/first-order-model</a>   （实现）</p>
<p>·<a href="https://papers.nips.cc/paper/8935-first-order-motion-model-for-image-animation">https://papers.nips.cc/paper/8935-first-order-motion-model-for-image-animation</a>    (论文)</p>
<p>而这次的项目是一位大佬为我们整理好的<a href="https://github.com/anandpawara/Real_Time_Image_Animation">Real_Time_Image_Animation</a></p>
<p>又叫实时图片动画，用Python和<a href="https://github.com/anandpawara/Real_Time_Image_Animation/search">Jupyter Notebook</a>搭建，套用了一阶运动模型训练好的 VoxCeleb 数据集，通过几个脚本代码便能运行，在项目页面里面作者也写明了你要干什么才能让它运行起来了</p>
<blockquote>
<h1 id="Real-time-Image-Animation"><a href="#Real-time-Image-Animation" class="headerlink" title="Real time Image Animation"></a>Real time Image Animation</h1><p>The Project is real time application in opencv using first order model</p>
<h1 id="Steps-to-setup"><a href="#Steps-to-setup" class="headerlink" title="Steps to setup"></a>Steps to setup</h1><h2 id="Step-1-Create-virtual-environment"><a href="#Step-1-Create-virtual-environment" class="headerlink" title="Step 1: Create virtual environment"></a>Step 1: Create virtual environment</h2><p><strong>Python version</strong> : python v3.7.3 or higher</p>
<p><strong>create virual environment</strong> : <code>pip install virtualenv</code></p>
<p><strong>activate virtual environment</strong> : <code>virtualenv env</code></p>
<h2 id="Step-2-Activate-virtual-environment"><a href="#Step-2-Activate-virtual-environment" class="headerlink" title="Step 2: Activate virtual environment"></a>Step 2: Activate virtual environment</h2><p><strong>For windows</strong> : <code>env/Script/activate</code></p>
<p><strong>For Linux</strong> : <code>source env/bin/activate</code></p>
<h2 id="Step-3-Install-required-modules"><a href="#Step-3-Install-required-modules" class="headerlink" title="Step 3 : Install required modules"></a>Step 3 : Install required modules</h2><p><strong>Install modules</strong> : <code>pip install -r requirements.txt</code></p>
<p><strong>Install pytorch and torchvision</strong> : <code>pip install torch===1.0.0 torchvision===0.2.1 -f https://download.pytorch.org/whl/cu100/torch_stable.html</code></p>
<h2 id="Step-4-Download-cascade-file-weights-and-model-and-save-in-folder-named-extract"><a href="#Step-4-Download-cascade-file-weights-and-model-and-save-in-folder-named-extract" class="headerlink" title="Step 4 : Download cascade file ,weights and model and save in folder named extract"></a>Step 4 : Download cascade file ,weights and model and save in folder named extract</h2><p><code>gdown --id 1wCzJP1XJNB04vEORZvPjNz6drkXm5AUK</code> The file is also availible via direct link on Google’s Drive: <a href="https://drive.google.com/uc?id=1wCzJP1XJNB04vEORZvPjNz6drkXm5AUK">https://drive.google.com/uc?id=1wCzJP1XJNB04vEORZvPjNz6drkXm5AUK</a></p>
<p><strong>On Linux machine</strong> : <code>unzip checkpoints.zip</code></p>
<p>If on windows platfrom unzip checkpoints.zip using unzipping software like 7zip.</p>
<p><strong>Delete zip file</strong> : <code>rm checkpoints.zip</code></p>
<h2 id="Step-5-Run-the-project"><a href="#Step-5-Run-the-project" class="headerlink" title="Step 5 : Run the project"></a>Step 5 : Run the project</h2><p><strong>Run application from live camera</strong> : <code>python image_animation.py -i path_to_input_file -c path_to_checkpoint</code></p>
<p><strong>Example</strong> : <code>python .\image_animation.py -i .\Inputs\Monalisa.png -c .\checkpoints\vox-cpk.pth.tar</code></p>
<p><strong>Run application from video file</strong> : <code>python image_animation.py -i path_to_input_file -c path_to_checkpoint -v path_to_video_file</code></p>
<p><strong>Example</strong> : <code>python .\image_animation.py -i .\Inputs\Monalisa.png -c .\checkpoints\vox-cpk.pth.tar -v .\video_input\test1.mp4</code></p>
<p><a href="https://github.com/anandpawara/Real_Time_Image_Animation/blob/master/animate.gif"><img src="https://github.com/anandpawara/Real_Time_Image_Animation/raw/master/animate.gif" alt="test demo"></a></p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO:"></a>TODO:</h3><p>Tkinter version</p>
<p>Need work on face alignments</p>
<p>Future plans adding deepfake voice and merging with video</p>
</blockquote>
<p>可能有些人看不懂，所以我带你们来一遍</p>
<h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><h3 id="1-安装Python-3-7"><a href="#1-安装Python-3-7" class="headerlink" title="1.安装Python 3.7"></a>1.安装Python 3.7</h3><p>为啥要安装3.7版本？因为后面的torch没有3.9版本的，去Python官网下载，并配置好环境变量</p>
<p>具体怎么百度一大堆，有手就行</p>
<h3 id="2-安装虚拟环境库"><a href="#2-安装虚拟环境库" class="headerlink" title="2.安装虚拟环境库"></a>2.安装虚拟环境库</h3><p>win+R键，输入CMD打开终端，输入此行分别安装和创建虚拟环境库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;pip install virtualenv&#96;</span><br><span class="line">&#96;virtualenv env&#96;</span><br></pre></td></tr></table></figure>

<h3 id="3-激活虚拟环境库"><a href="#3-激活虚拟环境库" class="headerlink" title="3.激活虚拟环境库"></a>3.激活虚拟环境库</h3><p>打开 C:\Users\Administrator\env\Scripts 打开activate.bat即可</p>
<h3 id="4-安装第三方环境库"><a href="#4-安装第三方环境库" class="headerlink" title="4.安装第三方环境库"></a>4.安装第三方环境库</h3><p>终端 e:(把e换为你从项目下载的文件路径的盘符)</p>
<p>cd /xxxx/xxxx/ (你项目文件的根目录)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;pip install -r requirements.txt&#96;</span><br></pre></td></tr></table></figure>

<p>输入运行即可，要一段时间，运行库很多</p>
<h3 id="5-安装Torch"><a href="#5-安装Torch" class="headerlink" title="5.安装Torch"></a>5.安装Torch</h3><p>接着上面的操作终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;pip install torch&#x3D;&#x3D;&#x3D;1.0.0 torchvision&#x3D;&#x3D;&#x3D;0.2.1 -f https:&#x2F;&#x2F;download.pytorch.org&#x2F;whl&#x2F;cu100&#x2F;torch_stable.html&#96;</span><br></pre></td></tr></table></figure>

<h3 id="6-下载数据集"><a href="#6-下载数据集" class="headerlink" title="6.下载数据集"></a>6.下载数据集</h3><p>下载 <a href="https://drive.google.com/uc?id=1wCzJP1XJNB04vEORZvPjNz6drkXm5AUK">https://drive.google.com/uc?id=1wCzJP1XJNB04vEORZvPjNz6drkXm5AUK</a></p>
<p>解压得两个vox文件放到 <strong>\Real_Time_Image_Animation-master\checkpoints</strong></p>
<h3 id="7-安装FFmpeg解码器并配置变量"><a href="#7-安装FFmpeg解码器并配置变量" class="headerlink" title="7.安装FFmpeg解码器并配置变量"></a>7.安装FFmpeg解码器并配置变量</h3><p><a href="http://www.ffmpeg.org/">www.ffmpeg.org</a> 点windows图标下第一个build，安装好后配置环境变量</p>
<p>怎么配置还是查百度，这个作用是可以把视频音频和视频合并，省功夫</p>
<h3 id="8-运行脚本"><a href="#8-运行脚本" class="headerlink" title="8.运行脚本"></a>8.运行脚本</h3><p>终端 e:(把e换为你从项目下载的文件路径的盘符)</p>
<p>cd /xxxx/xxxx/ (你项目文件的根目录)</p>
<p>终端运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python image_animation.py -i path_to_input_file -c path_to_checkpoint -v path_to_video_file</span><br></pre></td></tr></table></figure>

<p>path_to_input_file 是输入的模板图片</p>
<p>path_to_checkpoint 是权重文件路径</p>
<p>path_to_video_file 是输入的视频文件</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python image_animation.py -i Inputs&#x2F;x.jpg -c checkpoints&#x2F;vox-adv-cpk.pth.tar -v 1.mp4</span><br></pre></td></tr></table></figure>

<p>比如这个，输入图片默认放在input文件夹，导出的视频默认在output文件夹，模板视频在根目录</p>
<h3 id="9-大功告成"><a href="#9-大功告成" class="headerlink" title="9.大功告成"></a>9.大功告成</h3><p>在导出的文件夹(<strong>Output</strong>)就可以找到相关的视频文件</p>
<h3 id="10-替换其他的视频模板"><a href="#10-替换其他的视频模板" class="headerlink" title="10.替换其他的视频模板"></a>10.替换其他的视频模板</h3><p>原项目文档已经说明，你需要把视频模板裁剪为256x256大小，这个我推荐使用<strong>Premiere</strong>或者<strong>Vegas</strong>视频编辑软件，相关教程去百度查</p>
<p>输出的视频尺寸最好是正方形的，否则输出视频会把你的长方形比例照片弄成正方形的，会使人看起来很扁（笑），模板最好是正面的，表情不要太夸张</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>这种技术在某些情况下很侮辱人，请勿滥用</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>站点故障</title>
    <url>/2020/12/13/siteissue/</url>
    <content><![CDATA[<h1 id="2021-3-00"><a href="#2021-3-00" class="headerlink" title="2021-3-00"></a>2021-3-00</h1><h3 id="站点内的一些图片已经失效了，原因是之前图片寄存的图床炸了，导致了这种情况发生，有时间会对图片进行重新上传，并寻找更加可靠的图床供应商"><a href="#站点内的一些图片已经失效了，原因是之前图片寄存的图床炸了，导致了这种情况发生，有时间会对图片进行重新上传，并寻找更加可靠的图床供应商" class="headerlink" title="站点内的一些图片已经失效了，原因是之前图片寄存的图床炸了，导致了这种情况发生，有时间会对图片进行重新上传，并寻找更加可靠的图床供应商"></a>站点内的一些图片已经失效了，原因是之前图片寄存的图床炸了，导致了这种情况发生，有时间会对图片进行重新上传，并寻找更加可靠的图床供应商</h3><h3 id="—管理员"><a href="#—管理员" class="headerlink" title="—管理员"></a>—管理员</h3>]]></content>
  </entry>
  <entry>
    <title>Docker-Desktop中压缩虚拟磁盘(VHDX)的大小</title>
    <url>/2020/11/20/windockecompressr/</url>
    <content><![CDATA[<p><img src="https://ftp.bmp.ovh/imgs/2021/01/58446f843eb879e4.jpg"></p>
<h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><p>在Win10上使用Docker-Desktop时，当我删除了差不多5G的镜像文件中，发现Docker对于磁盘的占用依旧没有什么变化，仍然有8G的空间占用</p>
<p>在Win10上运行Docker，除了早期的VirtualBox方式之外，往往有两种方式，一种是Hyper-V，一种是WSL，无论是两种中的哪一种，都使用VHDX虚拟磁盘文件来存放Docker的镜像和容器数据，然而虚拟磁盘是弹性的方式扩展空间的，你使用多少虚拟磁盘的空间自动扩展到多少，但是当你删除文件缩小虚拟磁盘空间的使用时，虚拟磁盘并未缩小</p>
<a id="more"></a>



<p><a href="https://imgchr.com/i/D3p4AA"><img src="https://s3.ax1x.com/2020/11/21/D3p4AA.png" alt="D3p4AA.png"></a></p>
<p><a href="https://imgchr.com/i/D3pIht"><img src="https://s3.ax1x.com/2020/11/21/D3pIht.png" alt="D3pIht.png"></a></p>
<p>这也要归功于微软没有加入自动压缩虚拟磁盘的功能，然而在Docker里面是否会添加这种机制呢，然而并没有，虽然社区上有人向微软和Docker反应添加这种功能，然而我并没有看到两个软件添加了这种机制，可能是有什么原因？</p>
<p><a href="https://imgchr.com/i/D3pLng"><img src="https://s3.ax1x.com/2020/11/21/D3pLng.png" alt="D3pLng.png"></a></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h3 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V:"></a>Hyper-V:</h3><p>尝试用Powershell以管理员运行以下代码，或者你可以把此保存为ps1文件执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#region 管理员身份运行</span><br><span class="line">$currentWi &#x3D; [Security.Principal.WindowsIdentity]::GetCurrent()</span><br><span class="line">$currentWp &#x3D; [Security.Principal.WindowsPrincipal]$currentWi</span><br><span class="line"> </span><br><span class="line">if( -not $currentWp.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))</span><br><span class="line">&#123;</span><br><span class="line">  $boundPara &#x3D; ($MyInvocation.BoundParameters.Keys | foreach&#123;</span><br><span class="line">     &#39;-&#123;0&#125; &#123;1&#125;&#39; -f  $_ ,$MyInvocation.BoundParameters[$_]&#125; ) -join &#39; &#39;</span><br><span class="line">  $currentFile &#x3D; (Resolve-Path  $MyInvocation.InvocationName).Path</span><br><span class="line"> </span><br><span class="line"> $fullPara &#x3D; $boundPara + &#39; &#39; + $args -join &#39; &#39;</span><br><span class="line"> Start-Process &quot;$psHome\powershell.exe&quot;   -ArgumentList &quot;$currentFile $fullPara&quot;   -verb runas</span><br><span class="line"> return</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region 运行以下代码</span><br><span class="line">docker system prune -a -f</span><br><span class="line">net stop com.docker.service</span><br><span class="line">taskkill &#x2F;F &#x2F;IM &quot;Docker Desktop.exe&quot;</span><br><span class="line">stop-vm DockerDesktopVM</span><br><span class="line">Optimize-VHD -Path &quot;虚拟磁盘路径&quot; -Mode Full</span><br><span class="line">start-vm DockerDesktopVM</span><br><span class="line">start &quot;Docker程序路径&quot;</span><br><span class="line">net start com.docker.service</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure>

<h3 id="WSL2"><a href="#WSL2" class="headerlink" title="WSL2:"></a>WSL2:</h3><p>尝试用Powershell以管理员运行以下代码，或者你可以把此保存为ps1文件执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#region 管理员身份运行</span><br><span class="line">$currentWi &#x3D; [Security.Principal.WindowsIdentity]::GetCurrent()</span><br><span class="line">$currentWp &#x3D; [Security.Principal.WindowsPrincipal]$currentWi</span><br><span class="line"> </span><br><span class="line">if( -not $currentWp.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))</span><br><span class="line">&#123;</span><br><span class="line">  $boundPara &#x3D; ($MyInvocation.BoundParameters.Keys | foreach&#123;</span><br><span class="line">     &#39;-&#123;0&#125; &#123;1&#125;&#39; -f  $_ ,$MyInvocation.BoundParameters[$_]&#125; ) -join &#39; &#39;</span><br><span class="line">  $currentFile &#x3D; (Resolve-Path  $MyInvocation.InvocationName).Path</span><br><span class="line"> </span><br><span class="line"> $fullPara &#x3D; $boundPara + &#39; &#39; + $args -join &#39; &#39;</span><br><span class="line"> Start-Process &quot;$psHome\powershell.exe&quot;   -ArgumentList &quot;$currentFile $fullPara&quot;   -verb runas</span><br><span class="line"> return</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region 运行以下代码</span><br><span class="line">docker system prune -a -f</span><br><span class="line">net stop com.docker.service</span><br><span class="line">taskkill &#x2F;F &#x2F;IM &quot;Docker Desktop.exe&quot;</span><br><span class="line">wsl --shutdown</span><br><span class="line">Optimize-VHD -Path &quot;虚拟磁盘路径&quot; -Mode Full</span><br><span class="line">wsl</span><br><span class="line">start Docker程序路径&quot;</span><br><span class="line">net start com.docker.service</span><br><span class="line">pause</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机</category>
        <category>服务器&amp;网络</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>运营维护</tag>
      </tags>
  </entry>
  <entry>
    <title>自制渣翻字幕-虚渊玄主笔军事动漫OBSOLTE</title>
    <url>/2020/10/22/obsolete/</url>
    <content><![CDATA[<h1 id="OBSOLETE"><a href="#OBSOLETE" class="headerlink" title="OBSOLETE"></a>OBSOLETE</h1><p>想必很多看动漫的小年轻都知道虚渊玄，咱们的<strong>爱的战士</strong>，作为日本动漫作品创作鬼才，其在日漫这种浪漫主义作品中喜欢给你插入猝不及防的现实主义元素，善于运用把浪漫世界中美好之物一个个毁灭给你看的希腊式悲剧笔法:</p>
<p><strong><em>它一定有令人悲痛的结局，往往是生离死别；他一定讲的是一个无辜的人，一个道德完善的英雄，遭受了不幸。</em></strong></p>
<p><img src="https://i.loli.net/2020/10/24/U3ud2VCiQ5sabz1.jpg" alt="u=188288523,2253095310&amp;fm=26&amp;gp=0"></p>
<p>老虚笔下的一个个作品都让你感受到了一次次心灵的洗礼。</p>
<p>爱的战士老虚先后作有 《沙耶之歌》 《Fate》 《魔法少女小圆》，《心理测量者》 等作品，在其锋韧如刀的笔下突显了各个深刻的主题</p>
<p>而日本动漫常常以魔幻世界或现实生活为背景，且又偏向讲述一个个高中生突然觉醒拯救世界之类的故事，但这次却是一个部军事动漫。日本的军事类动漫较多的只是其中包含军事的元素，但军事元素细节和对军事的讲述却很显不足，硬军事元素在日漫中常常缺少，但此类动漫也受国内军迷的爱戴，但很多主要是馋作品中一些人物的身子，却不是军事元素。<br>这次老虚以军事，机甲等主题的融合又会诞生出什么样的作品，很受期待。</p>
<p>在2019年12月的时候OBSOLETE在Youtube由南梦宫代理播出，第一时间<br>便找资源并查找相关的翻译字幕，但发现缺少资源，于是自己开始对动漫的字幕工作。<br>在2019年12月中旬，完成了对OBSOLETE发布的6集的字幕工作，由于水平有限，难免有许多细节上的错误，但大致的意思应该是不会错，哈哈…………</p>
<p><a href="https://imgchr.com/i/BVdZMF"><img src="https://s1.ax1x.com/2020/10/24/BVdZMF.png" alt="BVdZMF.png"></a></p>
<a id="more"></a>

<p><img src="https://i.loli.net/2020/10/23/yRVugpJwo49scqx.png" alt="image-20201023125846569"></p>
<p><a href="https://imgchr.com/i/BAAB6J"><img src="https://s1.ax1x.com/2020/10/23/BAAB6J.jpg" alt="BAAB6J.jpg"></a><br><em>声明:动漫版权为南梦宫株式会社所有，该字幕仅仅提供交流学习之用，相关资源请24小时内删除</em></p>
<p>链接:<a href="https://pan.baidu.com/s/1Ezdi3EiSQOgtJ3mc0GZbPw#/">https://pan.baidu.com/s/1Ezdi3EiSQOgtJ3mc0GZbPw#/</a><br>PassW0rd:j3n4</p>
<p>不过现在快过去1年了，其他字幕也层出不穷，但是，OBSOLETE依旧是6集，而官方推特也天天在更新，<strong>莫非老虚这伙也摸了一年鱼？</strong></p>
<p>OBSOLETE采用2.5D画面，美术设计方面十分不错，其在画面方面的优秀也是不容置疑的。<br>人物设定还是不错的，风并不是传统日漫的画风而比较写实，所以画面细节上也对比其他日漫来说非常优秀<br><a href="https://imgchr.com/i/BAAeTP"><img src="https://s1.ax1x.com/2020/10/23/BAAeTP.gif" alt="BAAeTP.gif"></a></p>
<p>2014年，突然现身的外星人「佩多拉」向地球人提出「交易」，以石灰岩作为交换，地球人获得了比战机、战车、枪更便宜好用，任谁都能轻易驾驶的意识控制型泛用机器人「EXOFRAME」，并迅速扩散于全球，既能作为交通工具、工业机械，亦可成为战争机器…。2015年，首场以EXOFRAME作为武器的战事爆发，看似充满好处且和平的交易背后，隐藏的真相究竟为何…？</p>
<p>在前六集里，故事讲述了人型机甲对地球政治，军事，商业的影响</p>
<p>作画上该动漫的军事细节很到位，比如西方军队的宙斯盾系统，Scar改的<br>EXOFRAME枪，M1坦克，南美军队的苏式装备，还有各国的各种军队<br><a href="https://imgchr.com/i/BAAllQ"><img src="https://s1.ax1x.com/2020/10/23/BAAllQ.gif" alt="BAAllQ.gif"></a><br>描述的战争局面中各国与组织甚至是人是非常贴近现实，其中也反映了一些反战的主题<br><a href="https://imgchr.com/i/BAANkV"><img src="https://s1.ax1x.com/2020/10/23/BAANkV.gif" alt="BAANkV.gif"></a><br>虽然这些对军事的描述和处理对于军迷来说远远达不到他们的要求，但在对比日漫中来说是相当丰富的</p>
]]></content>
      <categories>
        <category>文化</category>
      </categories>
      <tags>
        <tag>人文</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>来自远古时代强大的文件共享多功能服务器</title>
    <url>/2020/10/20/weezo/</url>
    <content><![CDATA[<h1 id="文件共享服务器"><a href="#文件共享服务器" class="headerlink" title="文件共享服务器"></a>文件共享服务器</h1><p>如果你想搭建一个文件共享服务器来作私人云盘，你会选择什么，现在有很多服务软件可选，像可道云，易有云，NextCloud，Seafile，Cloudreve，Z-File，各有特色，功能强大，开源或者不开源，有些搭建简单有些搭建复杂。</p>
<p><strong>但今天要介绍一下Weezo</strong></p>
<p><img src="https://i.loli.net/2020/10/24/uw1HLA75X3sFPWN.jpg" alt="u=2074893334,862763281&amp;fm=15&amp;gp=0"></p>
<a id="more"></a>

<p>比如我最喜欢用的可道云，界面华丽，内置微型桌面，有各种插件和支持，功能多样，再找一个好的VPS放到公网就可以作一个由自己支配的云盘了，再也不用怕百度云各种流氓操作了~</p>
<p><strong>一个小巧华丽的文件浏览器，非常流畅</strong></p>
<p><strong>在浏览器就能使用的桌面</strong></p>
<p><strong>内置office，远程办公，甚至是NES模拟器</strong></p>
<p><strong>还有可客户端支持，方便管理</strong></p>
<p><strong>在线编辑代码</strong></p>
<h1 id="Weezo"><a href="#Weezo" class="headerlink" title="Weezo"></a>Weezo</h1><p>但我今天并不是吹可道云怎么怎么好的，前段时间在找各种文件服务器的时候，找到一个已于2014年停止更新的文件共享解决方案，看截图似乎很像模像样，原来10年就有这么完备的私人云盘服务了吗？</p>
<p>来自于21世纪10年代初期的网页设计，当时还是偏向于立体化的，在色彩方面也不是很讲究</p>
<p>感觉回到了那时流行半夜贴吧故事会，B站也还是专门一群大学生在此创作二次元与鬼畜，手上还拿着塞班S60系统的诺基亚的时候………..</p>
<p>所以，在深入了解Weezo后，我发现它不止是像模像样的程度了，他有:<br><strong>文件服务功能</strong><br><strong>博客空间功能</strong><br><strong>管理面板功能</strong><br><strong>影音中心功能</strong><br><strong>照片管理功能</strong><br>甚至有:<br><strong>远程桌面功能</strong><br><strong>RSS功能</strong><br><strong>公网映射，邮箱，社交账号功能</strong>(不可用)<br><strong>网络摄像头功能</strong><br>配置难度呢？一键安装，自动配置Apache，PHP，Mysql，仅支持Windows，图形化配置<br>是不是很惊艳，有些功能现在的文件共享解决方案也没有，而且可以集成这么多功能的也屈指可数，最重要的是，它还是10年左右的软件。</p>
<p>接下咱们深入一下这个软件</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>很简单，安装包也就50M，现在还是可以在搜索引擎搜到资源，安装除了路径全部默认设置，Weezo也会给我们配置好所需的Web环境</p>
<p>打开服务器，一个启动窗口下就在刷啦啦的打开各种服务，于是我们就可以看到软件面板了，在Win10下界面显示会有点问题，但并不影响使用</p>
<p>我们设定好了管理员密码后，在浏览器输入你的设备的ip，然后就是可以让人怀念的登陆界面，就像那时典型的社交软件的界面一样</p>
<p><img src="https://i.loli.net/2020/10/24/93ROkcErxD8JTiu.png" alt="image-20201024205408858"></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>登陆后界面还是较为空白，但我们可以看到这个界面很像是Windows Vista的窗口设计，然而这仅仅只是一个网页而已，在那时就可以实现类似视窗的界面了，我们可以对打开的窗口最大化，最小化，简直就像在网页中使用windows</p>
<p>进入软件面板，我们先对账户和各种权限设置一下，之后我们便可以添加各种服务</p>
<p><img src="https://i.loli.net/2020/10/23/MksiUKx34IaL7lz.png" alt="image-20201023140717644"></p>
<p><img src="https://i.loli.net/2020/10/23/ImVhgcU3z49DtAJ.png" alt="image-20201023140659549"></p>
<p>当然作为文件共享服务，我们先试试文件共享服务。文件共享支持你对电脑多个目录进行共享，对此分别设置各用户的权限等，我们现在添加两个文件目录</p>
<p><img src="https://i.loli.net/2020/10/25/tLvlWay6sBAphNi.png" alt="image-20201023140815747"></p>
<p>在页面端他的文件目录已经很贴近windows的资源管理器了，我们可以进行删除，拷贝，剪切，下载等功能，支持图标缩放</p>
<p><img src="https://i.loli.net/2020/10/23/GdEN1BeqHiscI2R.png" alt="image-20201023140937080"></p>
<p>支持读取文本，音乐，视频，照片，音乐会根据图标缩放的大小显示专辑图片</p>
<p><img src="https://i.loli.net/2020/10/24/bAxmM3Pk6YiHCyf.png" alt="image-20201024210449043"></p>
<p><img src="https://i.loli.net/2020/10/24/gPV6qc27m8LaYfC.png" alt="image-20201024210556089"></p>
<p>下载功能还支持种子下载，批量下载与上传，当然，现在不可用了</p>
<p><img src="https://i.loli.net/2020/10/24/1EJ5WikdDYbgRU8.png" alt="image-20201024211723034"></p>
<p>之后的功能中，还有很多我很感兴趣，比如这个还算漂亮的博客<br>我可以写写文章，也会在日历中标记日期</p>
<p>管理面板功能，依旧很惊艳，把访问人数和资源都画成图表便于查看</p>
<p><img src="https://i.loli.net/2020/10/24/BXA67pRkPDEKy8C.png" alt="image-20201024210034004"></p>
<p>还可以查看日志</p>
<p><img src="https://i.loli.net/2020/10/24/8vGNWuagnzIeklB.png" alt="image-20201024210108852"></p>
<p>我们可以在RSS功能中订阅源，但好像有点问题，Weezo一直都不能连接外网</p>
<p><strong>然后是远程桌面，这也太牛了</strong>，没想到一个文件服务器居然还集成了这种功能，如图，我们可以在网页中操控我的设备，但对于现在来说操控有些卡顿了</p>
<p><img src="https://i.loli.net/2020/10/24/vBVxncOA2EFQg7u.png" alt="image-20201024212119155"></p>
<p>相册功能，我们可以添加相片进去，成为便于储存与展示照片的相册</p>
<p><img src="https://i.loli.net/2020/10/24/ik1jPN7FIG4TKQ9.png" alt="QQ截图20201024212846"></p>
<p>视频功能，我们可以添加视频进行，之后可以在网页上播放，Weezo可以使用Flash，QuickTime，M2U播放但Weezo的播放相对现在来说有点复杂和低效了，现在直接用html了</p>
<p>预览这里还可以像电脑端B站网页把鼠标放在视频框该视频框机会动起来，小窗预览，厉害！</p>
<p><img src="https://i.loli.net/2020/10/24/CqvWpmIS9Bkrsdj.png" alt="image-20201024214002275"></p>
<p>音乐库，感觉很厉害的样子，新东西放在老容器里面的感觉</p>
<p><img src="https://i.loli.net/2020/10/24/hDxCPlogz8ULSIQ.png" alt="image-20201024215107330"></p>
<p>聊天功能，梦 回 10 年 网 络 聊 天 室</p>
<p><img src="https://i.loli.net/2020/10/24/krbh45xmeMtP3Aq.png" alt="image-20201024215723630"></p>
<p>网络摄像头功能，好吧，我也不知道具体有什么用</p>
<p><img src="https://i.loli.net/2020/10/24/o5LzGJa9lND6fpx.png" alt="image-20201024215842851"></p>
<p>博客功能</p>
<p><img src="https://i.loli.net/2020/10/24/3ESKialBzYoPUWc.png" alt="image-20201024220108137"></p>
<p>RSS源功能，这东西这么老了，我还记得我6年前在诺基亚手机桌面添加了好多源，啥科学松鼠会，微软学术之类的，现在的源都停止更新了，还保留着上世代互联网的味道</p>
<p>如图下的时间你也能想到以前的什么东西………….</p>
<p><img src="https://i.loli.net/2020/10/24/ywOPg53BnoNhqL8.png" alt="image-20201024220859056"></p>
<p>网络电视，我8年前都不知道有这东西，这里连中国的电视源都有，牛，可惜全部失效了，世代遗产…….</p>
<p><img src="https://i.loli.net/2020/10/24/Y8DXEg2OyTRWjw5.png" alt="image-20201024221140997"></p>
<p>这些功能如果你感兴趣的话可以下载Weezo来体验一下，功能还是很丰富的，也不止我现在介绍的这些</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>Weezo使用的是老版本的apache和php，php的版本也只有5.2，对于现在的web环境来说容易会有一些问题，比如在中文名称下会导致名称显示不全，无法设置中文路径等，这时候可以尝试升级php来解决。</p>
<p>用户设置里面我们可以添加用户，设置用户密码，设置用户功能面板，设置其权限等</p>
<p><img src="https://i.loli.net/2020/10/23/X8NRjKtH7dTF3ef.png" alt="image-20201023140511116"></p>
<p>在添加文件功能的时候要特别注意中文文件的问题，如果不能显示和添加中文路径可以多试几次或者直接使用添加文件而不是路径的方式，Weezo在启动一段时间后莫名其妙可以显示中文路径了，在此你也可以设置用户对文件的操作权限</p>
<p>一开始这些文件是乱码的，不能进入，但若你静心等候的话，奇迹还是会出现的</p>
<p><img src="https://i.loli.net/2020/10/24/1Bh8FCxGR2Hgb6K.png" alt="image-20201024221344194"></p>
<p>Weezo有上传文件大小限制，可以在设置里设置限制大小，但设置里面最多也只能设置1G，这时候可以去配置文件里面设置超过1G的大小 C:\Users\Administrator\AppData\Roaming\Weezo\data</p>
<p><img src="https://i.loli.net/2020/10/24/9akIdlWibofP5Gm.png" alt="image-20201024222144483"></p>
<p><img src="https://i.loli.net/2020/10/25/LcJKqFfnCumGs4l.png" alt="image-20201024221531530"></p>
<p>基本设置下可以设置服务模式，文件路径等，在下面显示了程序的主路径，环境路径，www文件路径，防火墙等，设置开机自启模式记得调Service因为运行这个程序要管理员权限</p>
<p><img src="https://i.loli.net/2020/10/23/idKrWaPmeMYVfkx.png" alt="image-20201023140404379"></p>
<p>服务器设置可以设置服务器地址，端口号，SSL，upnp，还有网络环境，签名证书，日志等</p>
<p><img src="https://i.loli.net/2020/10/24/RIsaPD6e5K2MHxc.png" alt="image-20201024221800355"></p>
<p>外观设置，壁纸，主题等，这点很像可道云</p>
<p><img src="https://i.loli.net/2020/10/24/9LF38cnDTJzlGpU.png" alt="image-20201024221846699"></p>
<p>有很多主题，都是当时流行的一些操作系统的UI，当然，也可以登陆到web里面设置主题和网页标题</p>
<p><img src="https://i.loli.net/2020/10/24/Iwxu2YCLbXDRsPU.png" alt="image-20201024205758602"></p>
<p><img src="https://i.loli.net/2020/10/24/BfM1up3QlORj9ZE.png" alt="image-20201024205843284"></p>
<p>管理功能可以在网页中设置Weezo桌面服务端的设置</p>
<p><img src="https://i.loli.net/2020/10/24/VpYRyOsEv9dwzPb.png" alt="image-20201024210010997"></p>
<p>竟然还包含终端界面来对计算机进行管理</p>
<p><img src="https://i.loli.net/2020/10/24/BwtVrGm6nWu87SY.png" alt="image-20201024210233443"></p>
<p>杂项，设置文件加密，密钥，文件权限，还有文件评分功能？？？</p>
<p><img src="https://i.loli.net/2020/10/24/PsxS3MJftzvZu5a.png" alt="image-20201024221957299"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1>]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>哈？</title>
    <url>/2020/10/15/%E5%93%88%EF%BC%9F/</url>
    <content><![CDATA[<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">date: 2020-10-15 18:52:07</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<a id="more"></a>



<p>
    <iframe name="iFrame1" width="780" height="480" src="/pages/font1/index.html" scrolling="yes" frameborder="1"></iframe>
</p>















]]></content>
  </entry>
  <entry>
    <title>学习笔记系列</title>
    <url>/2020/10/01/learnote/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ed65a38ecc53ff6b705ffc8b5225b57bd665a543fa9dcce79a9dd43cec973276">d23a6ea4237b63f881a6a63a0bbfe921b8b69a6fe1cea5a83acbe7f4f4f99435cb08060d0ad3717f0f261e18abcada9ea394baffa5fc3a472c78cef89c3b964c52635668547fcefedb212f0a611ae96d573a16c8ddcadad5ad7274702801424bcdc8b136e5b5c19f393cec6e32de6034e3d846081998dc7fb67b2a40325f1214d9b781b87adc5ff65e0d4664303729e1f8cb684690e2aead4b008acc44ec8132f9c2899bb4b879f00f17ba6c747fa649862e87ba8945ef8e5404fd0b91d45e78859954a2fde763508cb1ed2ca0fdaecab20c00c8c5ed49004c7a948ce67b209ec26edce03da5971c28c0fc6d5b23b688e3d063c4729212517ff89d309af302f51bf6c07157c4efe40d2765ea14a23eb66b7aa5d3d2bcde3e5085128c59bfd57f7a151dde2536f05a897f735255bbe1345f6bbfd389ebdbcc356fc43b96e15563ca475ddbf76a71d9543d7b92164290b51216b80f6250709b008b7876814e4758f56230bc94280bf7404e367c14859b234053b8eccb414a3d6c61c308109eb750fd55aa58711358ca980c808c2396ae6b5a6b556711133ce3eae71f7ef04f857127267117d0e5c4cbb8b87a37e2d2eda8818764bb15e17301056e80e7da55e39c05ef0520bde997bde2df1062fb73eb2171ec026719588042092571e81a344b21d3f7ebd62a8efc10390c0afab0b23bfbc78dc83ca4da766ab315b8eed493569695eba225a8498d6b5253715c54a60369e7e4d263e8a52074bd46fd8ba4c6f82229f0a3ecc75fa7ca08572b1a2ce1af35213dc49daa049fe9ed1eebea3091fc6d931769aee009c232d06c00508d7918883b66cafe5400de468b2124d957b35d37d4191d2d3b9376f3e37e185c349e900a62a56349ad2ffff7e46b4c6571977e69f60c3721a96632fa917c3455c8cc12a03c539407e5b90dfb23ce44d7ff0aad1e2307ab29d41dbe890005d3d19a526263a3e6611c135324d2aea1632686d6fa5e4bdf6b0d03f48d87a5870cf06e5b2d564665744c398a9ab35f515d9d1a4e67af66f55aaeaff1ee1524676d5b415fdf28be2afdc3e822ec8f908bc9c1bfe38b732f281e0a8f6d5e5feefa89a13077017d8b39f2df7d016ccb4d34af3dfcb36e1e8aa123c1924951690616d2738716414a97c2726af4bc8af836b5f2e0585756f8cdc9f5eb1bb81e82d1f45700df68e2170996a68bc8af7cf5d26776e3b3585229ace8dddbdebd693c0db7b7904cd250fe309ef6dec72112f91476bf5acc3f0a7f60857375254ed70622cf07ebac01c8eff16c7b2448a19becf74dde59ee56e975bee886084f0bad361566d9f49e11f8e21310b7a3648d86611b41f78dea68caeff53cb8250e99eaf6ed94dde48b3fa999bd8bb862430ee8337e5d3a7927ddf92a3828fd3df81472e445b79800fffd87d2b75fb2fc4f6289da5176f76ff729be1451b805486bc3427a41a0b82ed9dbc0cb0acadacc9b40c1e3e8106fa471c455ccb1ef5a04de909e605b3b30cd73764192</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
</search>
